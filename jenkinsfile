pipeline {
    agent any 

    environment {
        // Define environment variables if needed, like the DOTNET_CLI_HOME to avoid issues on some slaves
        DOTNET_CLI_HOME = '/tmp/dotnet_cli_home'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm  // This checks out the code from your SCM. Assumes you've set up SCM in your Jenkins job configuration.
            }
        }

        stage('Restore') {
            steps {
                // Restore NuGet packages
                bat 'dotnet restore'
            }
        }

        stage('Build') {
            steps {
                // Build the solution
                bat 'dotnet build --configuration Release'
            }
        }

        /*
        stage('Test') {
            steps {
                // Run unit tests on the solution
                bat 'dotnet test --configuration Release --no-build --logger "trx;LogFileName=unittests.trx"'
            }
            post {
                always {
                    // Archive test results for later inspection
                    // If you've the xUnit plugin installed, you can convert and report the tests with:
                }
            }
        }
        */

        stage('Publish') {
            steps {
                // Publish the app to an output directory
                bat 'dotnet publish --configuration Release --output out/'
            }
        }

       stage('Deploy') {
            steps {
                script {
                    // Kill any previously running instance of the app
                    bat 'taskkill /F /IM InoDayJenkins.exe || exit 0'

                    // Start the application in the background
                    bat 'nohup dotnet E:/INetPub/JekninsInnoDay/MIJO/InoDayJenkins.dll > ./logs/app.log 2>&1 &'
                }
            }
        }
    }

    post {
        always {
                bat 'rmdir /S /Q out'
        }
        /*success {
            // Steps that will only run if the pipeline was successful, like notifications
        }*/
        /*failure {
            // Steps that will only run if the pipeline failed, like sending a failure email/notification
        }*/
    }
}
